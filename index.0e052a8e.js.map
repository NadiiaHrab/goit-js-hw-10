{"mappings":"uDAEe,SAAAA,EAAyBC,GACtC,OAAOA,EACJC,KACC,EAACC,YAAEA,EAAWC,MACZA,EACAC,KAAAC,EAAIC,aACJA,EAAYC,eACZA,EAAcC,UACdA,EAASC,OACTA,EAAMC,aACNA,EACAC,GAAAC,MAEA,IAAIC,EAWJ,OAVQJ,IACNI,EAAaJ,EAAOR,KAAI,EAACG,KAAEA,KAAWA,IAAMU,KAAK,OAE/CN,IACFK,EAAaE,EAAAC,GACVC,QAAO,EAACN,GAAEA,KAASH,EAAUU,SAASP,KACtCV,KAAI,EAACG,KAAEA,KAAWA,IAClBU,KAAK,OAGH,sCAAsCF,4JAGSV,UACpDC,GAASE,uJAK4BF,GAASE,0GAENQ,GAAc,iEACdP,GAAgBC,GAAkB,QAAQY,MACtE,EACA,8DAE+BT,GAAgB,iFAGnD,IAGbI,KAAK,G,CChDVE,EAAiBI,KAAKC,MAAM,4hBCgF5B,MAAMC,EAAKC,SAASC,cAAc,yBAYpBC,MAAM,uIACXC,MAAKC,GACNA,EAASC,SAEPF,MAAKG,IACJC,QAAQC,IAAIF,EAAKG,QAAQ,IAVjCN,MAcH,SAA2B1B,GACzBsB,EAAGW,UAAYlC,EAAgBC,E,IAd9BkC,MAAKC,GAAUA,EAAOC,QAChBC,OAAOC,GAAUR,QAAQC,IAAIO","sources":["src/filmsListMarkupTempl.js","src/genres.json","src/index.js"],"sourcesContent":["import genresData from './genres.json';\n\nexport default function makeFilmsMarkup(films) {\n  return films\n    .map(\n      ({ poster_path,\n        title,\n        name,\n        release_date,\n        first_air_date,\n        genre_ids,\n        genres,\n        vote_average,\n        id,\n      }) => {\n        let filmGenres;\n            if (genres) {       \n          filmGenres = genres.map(({ name }) => name).join(', ');\n        }\n        if (genre_ids) {\n          filmGenres = genresData\n            .filter(({ id }) => genre_ids.includes(id))\n            .map(({ name }) => name)\n            .join(', ');\n        }\n\n        return `<li class=\"trending__item\" data-id=${id}>\n        <a href=\"\" class=\"trending__link\">\n                <div class=\"trending__img\">\n                <img src=https://image.tmdb.org/t/p/original${poster_path} alt=\"${\n          title || name\n        }\" loading=\"lazy\">\n        </a>\n        </div>\n                <div class=\"trending__description\">\n                  <p class=\"trending__title\">${title || name}</p>\n                  <div class=\"trending__meta\">\n                    <p class=\"trending__genres\">${filmGenres || 'Action'}</p>\n                    <p class=\"trending__data\">|${(release_date || first_air_date || '2023').slice(\n                      0,\n                      4,\n                    )}</p>\n                    <span class=\"trending__rating\">${vote_average || '-'}</span>\n                  </div>\n                </div>\n            </li>`;\n      },\n    )\n    .join('');\n  \n}\n","[\n    {\n        \"id\": 28,\n        \"name\": \"Action\"\n    },\n    {\n        \"id\": 12,\n        \"name\": \"Adventure\"\n    },\n    {\n        \"id\": 16,\n        \"name\": \"Animation\"\n    },\n    {\n        \"id\": 35,\n        \"name\": \"Comedy\"\n    },\n    {\n        \"id\": 80,\n        \"name\": \"Crime\"\n    },\n    {\n        \"id\": 99,\n        \"name\": \"Documentary\"\n    },\n    {\n        \"id\": 18,\n        \"name\": \"Drama\"\n    },\n    {\n        \"id\": 10751,\n        \"name\": \"Family\"\n    },\n    {\n        \"id\": 14,\n        \"name\": \"Fantasy\"\n    },\n    {\n        \"id\": 36,\n        \"name\": \"History\"\n    },\n    {\n        \"id\": 27,\n        \"name\": \"Horror\"\n    },\n    {\n        \"id\": 10402,\n        \"name\": \"Music\"\n    },\n    {\n        \"id\": 9648,\n        \"name\": \"Mystery\"\n    },\n    {\n        \"id\": 10749,\n        \"name\": \"Romance\"\n    },\n    {\n        \"id\": 878,\n        \"name\": \"Science Fiction\"\n    },\n    {\n        \"id\": 10770,\n        \"name\": \"TV Movie\"\n    },\n    {\n        \"id\": 53,\n        \"name\": \"Thriller\"\n    },\n    {\n        \"id\": 10752,\n        \"name\": \"War\"\n    },\n    {\n        \"id\": 37,\n        \"name\": \"Western\"\n    }\n]\n","// import './css/styles.css';\n// import debounce from 'lodash.debounce';\n// import { Notify } from 'notiflix/build/notiflix-notify-aio';\n// import API from './fetchCountries';\n// import { renderCountryList, renderCountryCard } from \"./render-function\";\n\n\n\n// const DEBOUNCE_DELAY = 300;\n\n// const inputSearch = document.querySelector('#search-box');\n// const listCountry = document.querySelector('.country-list');\n// const cardCountry = document.querySelector('.country-info');\n\n// inputSearch.addEventListener('input', debounce(onInputSearch, DEBOUNCE_DELAY));\n\n\n// function onInputSearch(e) {\n//     e.preventDefault();\n\n//     const query = inputSearch.value.trim();\n    \n    \n\n//     API.fetchCountries(query)\n//         .then(onfetchSearch)\n//         .catch(onfetchError); \n// };\n\n// function onfetchSearch(countries) {\n\n//      if (countries.length > 10) {\n                \n//                 Notify.info(\"Too many matches found. Please enter a more specific name.\");\n//                 onClearRender();\n\n//             } else if (countries.length >= 2 && countries.length <= 10) {\n\n//                 renderList(countries);\n//                 cardCountry.innerHTML = '';\n        \n//             } else if (countries.length === 1) {\n                \n//                 renderCard(countries);\n//                 listCountry.innerHTML = '';\n//     }\n// };\n\n\n// function renderList(countries) {\n//     const list = renderCountryList(countries);\n//     listCountry.insertAdjacentHTML('beforeend', list);\n// }\n\n// function renderCard(countries) {\n//     const card = renderCountryCard(countries);\n//     cardCountry.insertAdjacentHTML('beforeend', card);\n    \n// }\n\n// function onfetchError(error) {\n//     Notify.failure(\"Oops, there is no country with that name\");\n//     onClearRender();\n    \n// }\n\n// function onClearRender() {\n//     listCountry.innerHTML = '';\n//     cardCountry.innerHTML = '';\n// };\n\n\n\n// filmoteka------------------------\n\n\n\n\n\nimport makeFilmsMarkup from './filmsListMarkupTempl';\nconst ul = document.querySelector('.trending__collection');\n\nconst BASE_URL = 'https://api.themoviedb.org/3/';\nconst TRENDING = 'trending/movie/week';\nconst API_KEY = '1d8f1c2313e3ed4d118cc85bb96261b9';\n\ngetFetchTrending()\n  .then(renderFilmsMarkup)\n  .tnet(result => result.total)\n        .catch((error) => console.log(error));\n\nfunction getFetchTrending() {\n       return fetch(`${BASE_URL}${TRENDING}?api_key=${API_KEY}&language=en-US&page=1&include_adult=false`)\n        .then(response =>\n        response.json()\n        )\n         .then(data => {\n           console.log(data.results);\n         })\n}\n\nfunction renderFilmsMarkup(films) {\n  ul.innerHTML = makeFilmsMarkup(films);\n}\n\n\n\n// function renderTrendingCard(films) {\n\n//     const cardEl = films.map(film => {\n//         return `<li class=\"trending__item\">\n//     <img class=\" card__img\" src=\"https://www.themoviedb.org/t/p/w500${film.poster_path}\"\n//       onerror=\"this.onerror=null;this.src='https://subscribenow.com.au/time/asia/Solo/Content/Images/noCover.gif'\" loading=\"lazy\"\n//       alt=\"${film.title}\" title=\"${film.title}\" data-id=\"${film.id}\" width=\"280\"/>\n// <h3 class=\"card__title\">${film.title}</h3>\n// <div class=\"card-field\">\n//     <p class=\"text__vote\">${film.release_date}</p>\n//     <p class=\"text__vote\">${film.genre_ids}</p>\n// </div>\n\n// </li>`\n        \n//     }).join('');\n\n//     ul.insertAdjacentHTML('beforeend', cardEl);\n\n\n//     // return cardEl;\n// };\n"],"names":["$e978b81f0c32a0b8$export$2e2bcd8739ae039","films","map","poster_path","title","name","name1","release_date","first_air_date","genre_ids","genres","vote_average","id","id1","filmGenres","join","$parcel$interopDefault","$ad23c1da584f1d2d$exports","filter","includes","slice","JSON","parse","$1f0dc3b9307be026$var$ul","document","querySelector","fetch","then","response","json","data","console","log","results","innerHTML","tnet","result","total","catch","error"],"version":3,"file":"index.0e052a8e.js.map"}